---
description: 
globs: 
alwaysApply: false
---
### **1. 프로젝트 목표 및 추가 아이디어**
*   **목표 :**   다음 기능을 만족하는 MVP종합 플랫폼을 구축 개발한다.


*   **동적 MVP 페이지 관리:** 워크스페이스 내에서 MVP 페이지(기능)를 라이프사이클에 따라 손쉽게 추가 및 제거합니다.
*   **강화된 권한 관리:** 관리자가 워크스페이스를 생성하고, 그룹 기반으로 권한을 부여합니다. 그룹에 속한 사용자만 해당 워크스페이스와 그 안의 페이지를 볼 수 있습니다. 관리자는 모든 워크스페이스에 접근 가능합니다.
*   **모듈식 아키텍처:** MVP 페이지를 워크스페이스별 폴더 단위로 관리하여 기능의 독립성을 보장하고, 백엔드와 프론트엔드 모듈을 쉽게 교체할 수 있도록 설계합니다. 의도치 않은 변경을 방지하기 위해 공통 모듈은 분리하여 관리합니다.
*   **(추가 아이디어) 대시보드 기능:** 관리자와 워크스페이스 관리자는 각 워크스페이스의 사용 현황, 활성화된 MVP 목록 등을 한눈에 파악할 수 있는 대시보드 기능을 추가합니다.
*   **(추가 아이디어) MVP 템플릿:** 자주 사용되는 기능 조합을 템플릿으로 만들어 신규 MVP 페이지를 더 빠르게 생성할 수 있도록 지원합니다.
*   **(추가 아이디어) 비동기 처리 도입:** 알림, 데이터 처리 등 시간이 소요되는 작업을 비동기적으로 처리하여 사용자 경험을 향상시킵니다.

### **2. 개발 환경 및 기술 스택**

명시된 제약 조건과 최신 기술 트렌드를 반영한 환경 및 기술 스택입니다.

*   **개발 및 운영 환경**
    *   **개발 환경:** macOS, Linux, Windows (멀티 플랫폼 지원)
    *   **운영체제 (On-premise):** Windows Server
    *   **가상화:** Docker와 같은 가상화 기술은 사용하지 않음

*   **기술 스택 (Technology Stack)**
    *   **백엔드 프레임워크: FastAPI (Python 3.11)**
        *   **선택 이유:** Python 3.11의 향상된 성능과 타입 힌트를 완벽하게 활용하며, 코드의 명확성, 자동 유효성 검사, API 문서 자동 생성 기능을 제공합니다. 비동기 처리를 기본 지원하여 높은 성능을 보장하며, 모듈화된 구조는 500줄 이하 코드 분리 원칙을 지키며 기능을 독립적으로 개발하기에 최적입니다.
    *   **프론트엔드: React (Node.js 22) + Tailwind CSS**
        *   **선택 이유:** React의 컴포넌트 기반 아키텍처는 모듈식 MVP 페이지 개발에 이상적입니다. Tailwind CSS는 유틸리티-우선 접근 방식으로 빠르고 일관된 UI 개발을 가능하게 하여 생산성을 극대화합니다.
    *   **데이터베이스: PostgreSQL 17**
        *   **선택 이유:** 최신 버전의 안정성과 강력한 기능을 활용합니다. 복잡한 쿼리와 JSONB 필드를 지원하여 유연한 데이터 구조 설계에 유리합니다.
    *   **ORM: SQLAlchemy 2.0 (with Alembic for migrations)**
        *   **선택 이유:** FastAPI와 완벽하게 통합되며, 최신 비동기 패러다임(`async/await`)을 완벽하게 지원합니다. Alembic을 통해 데이터베이스 스키마 변경을 체계적으로 관리합니다.
    *   **인증: 분리된 인증 서버 (JWT 기반)**
        *   **구조:** 인증은 독립된 `localhost:8000`에서 실행되는 인증 서버가 전담합니다. 상위 폴더에 MAXDP폴더에서 인증로직을 참고하고, login 및 me api를 여기서 작동시킨다. 
        *   **본 애플리케이션의 역할:** 본 애플리케이션은 **리소스 서버(Resource Server)** 역할을 수행합니다. 클라이언트로부터 `Authorization` 헤더에 담겨 전달된 JWT를 받아, 해당 토큰이 유효한지 **검증(validation)**하는 책임만 가집니다. 토큰 발급은 관여하지 않습니다. 검증은 보통 인증 서버의 공개 키(Public Key)를 이용하거나 공유된 비밀 키(Shared Secret)를 통해 이루어집니다.
    *   **배포 (On-premise Windows)**
        *   **백엔드:** `uvicorn`을 사용하여 FastAPI 애플리케이션을 실행하고, **NSSM(Non-Sucking Service Manager)**과 같은 도구를 사용하여 Windows 서비스로 등록하여 안정적인 운영을 보장합니다.
        *   **프론트엔드:** `npm run build`를 통해 생성된 정적 파일(HTML, CSS, JS)을 **Nginx for Windows** 또는 **IIS(인터넷 정보 서비스)**를 통해 서빙합니다.

### **3. 아키텍처 및 프로젝트 구조**

"모듈형 모놀리스(Modular Monolith)" 아키텍처를 채택하고, **파일당 500줄 제한** 원칙을 철저히 지키기 위해 기능을 세분화합니다.

```
/project_root
├── app/
│   ├── __init__.py
│   ├── main.py             # FastAPI 앱 초기화 및 라우터 포함 (최소한의 코드)
│   ├── core/               # 프로젝트 핵심 설정, 공통 유틸리티
│   │   ├── config.py       # 환경변수 관리 (Pydantic-settings 사용)
│   │   └── security.py     # JWT 토큰 검증 및 사용자 정보 추출 로직
│   ├── commons/            # 공통 컴포넌트 (알림, 파일 핸들러 등)
│   ├── apis/
│   │   ├── __init__.py     # v1 라우터를 포함하는 메인 라우터
│   │   └── v1/
│   │       ├── __init__.py
│   │       ├── workspaces.py   # 워크스페이스 CRUD API
│   │       ├── groups.py       # 그룹 관리 API
│   │       └── users.py        # 사용자 정보 조회 API
│   ├── db/                 # 데이터베이스 관련
│   │   ├── session.py      # SQLAlchemy 세션 생성 및 관리
│   │   └── migrations/     # Alembic 마이그레이션 파일
│   ├── models/             # SQLAlchemy 모델 (테이블별 파일 분리)
│   │   ├── user.py, workspace.py, group.py 등
│   ├── schemas/            # Pydantic 스키마 (모델별 파일 분리)
│   │   ├── user.py, workspace.py, group.py 등
│   ├── crud/               # 데이터베이스 CRUD 로직 (모델별 파일 분리)
│   │   ├── base.py         # 기본 CRUD 클래스
│   │   ├── crud_user.py, crud_workspace.py 등
│
├── workspaces/             # MVP 페이지 모듈 디렉토리
│   ├── __init__.py
│   ├── dynamic_loader.py   # MVP 모듈을 동적으로 로딩하는 로직
│   ├── survey_mvp/         # 예시: 설문조사 MVP
│   │   ├── backend/        # 백엔드 모듈
│   │   │   ├── __init__.py
│   │   │   ├── router.py   # FastAPI 라우터
│   │   │   ├── models.py, schemas.py, crud.py
│   │   └── frontend/       # 프론트엔드 모듈 (React 컴포넌트)
│   └── board_mvp/
│
├── frontend/               # 메인 프론트엔드 프로젝트 (React)
│   ├── public/
│   ├── src/
│   ├── package.json
│   └── tailwind.config.js
│
├── scripts/                # 배포 및 개발용 스크립트
├── .env                    # 환경 변수 파일
├── requirements.txt        # Python 의존성
└── README.md
```

### **4. 개발 계획 (단계별)**

**1단계: 기본 골격 및 인증 연동**

*   FastAPI 프로젝트 기본 구조 설정 및 Python 3.11 가상 환경 구성.
*   PostgreSQL 17 연동 및 SQLAlchemy 2.0 비동기 세션 설정.
*   **인증 연동:** `core/security.py`에 외부 인증 서버(`localhost:8000`)에서 발급된 JWT를 검증하는 로직을 구현. FastAPI의 의존성 주입(Dependency Injection)을 통해 API 요청 시마다 토큰을 자동으로 검증하고 유효한 사용자 정보를 가져오는 체계 구축.
*   기본 모델(User, Workspace, Group), 스키마, CRUD 함수 정의 (파일 분리 원칙 준수).

**2단계: 워크스페이스 및 권한 관리 기능 구현**

*   인증된 사용자를 기반으로 워크스페이스 생성, 수정, 삭제 API 구현.
*   워크스페이스와 그룹을 연결하여 접근 권한을 부여하는 로직 구현.
*   워크스페이스 그룹은 인증서버(localhost)에서 리스트를 가져온다. (localhost:8000/docs)에서 api확인.
*   사용자 역할(admin, user)에 따른 API 접근 제어 로직 구현. admin일경우 모든 워크스페이스와 기능을 조회 한다.
    그리고 워크스페이스 생성 및 워크스페이스 권한 부여 기능을 가진다.

**3단계: 동적 MVP 모듈 로딩 기능 구현**

*   `workspaces/dynamic_loader.py`를 구현하여 `workspaces` 디렉토리 내의 유효한 MVP 백엔드 모듈(라우터)을 스캔하고, FastAPI 애플리케이션에 동적으로 등록하는 메커니즘 개발.
*   관리자가 DB 플래그를 통해 MVP를 활성화/비활성화하고, 앱 재시작 시 이를 반영하도록 구현.

**4단계: 프론트엔드 및 공통 기능 개발**

*   `create-react-app` 또는 `Vite`를 사용하여 React 프로젝트를 `frontend` 디렉토리에 설정하고 Tailwind CSS 통합.
*   로그인 페이지(인증 서버로 리디렉션 또는 직접 API 호출), 워크스페이스 대시보드 UI 개발.
*   API 통신을 위한 클라이언트 모듈(e.g., Axios) 설정 및 JWT 헤더 자동 첨부 로직 구현.

**5단계: MVP 예제 개발 및 통합 테스트**

*   간단한 MVP 페이지(예: 설문조사)를 `workspaces/survey_mvp`에 백엔드와 프론트엔드 컴포넌트로 나누어 개발.
*   개발된 MVP가 동적 로딩, 권한 관리 시스템과 올바르게 연동되는지 전체 통합 테스트 수행.

**6단계: On-premise 배포 준비 및 문서화**

*   **백엔드 배포:**
    1.  Windows Server에 Python 3.11 설치 및 가상환경 설정.
    2.  `pip install -r requirements.txt`로 의존성 설치.
    3.  `uvicorn app.main:app --host 0.0.0.0 --port 8001`과 같이 백엔드를 실행하는 `.bat` 스크립트 작성.
    4.  NSSM을 사용하여 위 스크립트를 Windows 서비스로 등록.
*   **프론트엔드 배포:**
    1.  `npm run build`를 실행하여 `frontend/build` 디렉토리에 정적 파일 생성.
    2.  Nginx for Windows 또는 IIS를 설치하고, 80번 포트로 들어오는 요청을 `frontend/build` 디렉토리의 파일을 서빙하도록 설정.
    3.  `/api` 와 같은 특정 경로로 들어오는 요청은 백엔드 서비스(예: `http://localhost:8001`)로 전달하는 **리버스 프록시(Reverse Proxy)** 설정.

### **5. AI IDE를 위한 상세 가이드라인**

*   **엄격한 파일 분리 (500줄 제한):** AI에게 "Create a CRUD function for the Workspace model in the `app/crud/crud_workspace.py` file." 와 같이 명확하고 구체적인 파일 경로와 역할을 지정하여 코드를 생성하도록 지시합니다. 이는 코드 분리 원칙을 지키는 데 필수적입니다.
*   **API 명세 기반 개발:** 모든 API 엔드포인트는 Pydantic 스키마를 사용하여 요청/응답 형식을 명확히 정의합니다. AI에게 "Create a Pydantic schema for Workspace creation" 과 같이 지시하여 일관성을 유지합니다.
*   **의존성 주입 활용:** FastAPI의 의존성 주입을 적극 활용하도록 지시합니다. 특히, "Create a dependency in `core/security.py` that validates the JWT and returns the user payload." 와 같이 인증 로직을 의존성으로 분리하여 재사용성과 테스트 용이성을 높입니다.
*   **환경 변수 관리:** 모든 설정은 `core/config.py`에서 `pydantic-settings`를 통해 관리되도록 합니다. AI에게 설정 값을 하드코딩하지 말고 설정 파일을 통해 읽어오도록 명시합니다.
*   **비동기 코드 명시:** 데이터베이스 접근 등 I/O 바운드 작업은 반드시 `async/await`를 사용하도록 지시합니다. "Write an async CRUD function to get a user by ID using SQLAlchemy 2.0 async session." 과 같이 명확하게 요구합니다.
*   **주석:** 파일 최상단에 프로세스와 동작 방식에 대한 설명을 아주 친절하게 작성합니다.