{
  "frontend": {
    "frontend/src/App.simple.tsx": ["React from 'react'"],
    "frontend/src/App.tsx": ["BrowserRouter from 'react-router-dom'", "useNavigate from 'react-router-dom'"],
    "frontend/src/api/client.ts": ["useAuthStore from '../stores/authStore'"],
    "frontend/src/api/mvpModules.ts": ["MVPModuleCreate from '../types/mvpModule'"],
    "frontend/src/components/common/AuthErrorToast.tsx": ["Info from 'lucide-react'"],
    "frontend/src/components/common/ErrorBoundary.tsx": ["Bug from 'lucide-react'"],
    "frontend/src/components/common/Header.tsx": ["Link from 'react-router-dom'", "Sparkles from 'lucide-react'", "getAvatarColor from '../../utils/avatar'", "getInitials from '../../utils/avatar'"],
    "frontend/src/components/files/FileBrowser.tsx": ["MoreVertical from 'lucide-react'"],
    "frontend/src/components/mvp/MVPModulesView.tsx": ["Settings from 'lucide-react'", "Trash2 from 'lucide-react'", "Power from 'lucide-react'", "PowerOff from 'lucide-react'", "Monitor from 'lucide-react'"],
    "frontend/src/components/workspace/CreateWorkspaceModal.tsx": ["Plus from 'lucide-react'", "UserPlus from 'lucide-react'", "toast from 'react-hot-toast'"],
    "frontend/src/components/workspace/WorkspaceSidebar.tsx": ["Plus from 'lucide-react'", "FolderPlus from 'lucide-react'"],
    "frontend/src/hooks/useAuthRefresh.ts": ["useCallback from 'react'"],
    "frontend/src/hooks/useSecureLogout.ts": ["tokenBlacklistService from '../services/tokenBlacklistService'"],
    "frontend/src/pages/admin/UserManagement.tsx": ["toast from 'react-hot-toast'"],
    "frontend/src/services/authService.ts": ["type TokenResponse from './refreshTokenService'"],
    "frontend/src/services/refreshTokenService.ts": ["apiClient from '../api/client'"],
    "frontend/src/utils/encryptionTestUtils.ts": ["refreshTokenService from '../services/refreshTokenService'"],
    "frontend/src/utils/tokenTestUtils.ts": ["isDevelopment from './logger'"],
    "frontend/src/workspaces/personal_test/components/common/DatabaseConfigAlert.tsx": ["X from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/common/EquipmentNode.tsx": ["Node from 'reactflow'"],
    "frontend/src/workspaces/personal_test/components/common/TextNode.tsx": ["Type from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/common/TokenStatusMonitor.tsx": ["useTokenStatus from '../../../../hooks/useAuthRefresh'"],
    "frontend/src/workspaces/personal_test/components/editor/DataSourceDialog.tsx": ["Code from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/editor/EditorToolbar.tsx": ["Plus from 'lucide-react'", "Play from 'lucide-react'", "Pause from 'lucide-react'", "AlertCircle from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/editor/FieldMappingDialog.tsx": ["Save from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/editor/LoadFlowDialog.tsx": ["Check from 'lucide-react'", "Download from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/editor/VersionManagementDialog.tsx": ["Check from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/components/publish/PublishItem.tsx": ["User from 'lucide-react'"],
    "frontend/src/workspaces/personal_test/pages/ProcessFlowEditor.original.tsx": ["Plus from 'lucide-react'", "Pause from 'lucide-react'", "Settings from 'lucide-react'", "useParams from 'react-router-dom'"],
    "frontend/src/workspaces/personal_test/pages/ProcessFlowEditor.tsx": ["type FlowBackupData from '../utils/flowBackup'"],
    "frontend/src/workspaces/personal_test/pages/ProcessFlowMonitor.original.tsx": ["Activity from 'lucide-react'", "AlertCircle from 'lucide-react'", "useParams from 'react-router-dom'"]
  },
  "backend": {
    "backend/app/main.py": ["os", "middleware.csrf_protection.CSRFConfig", "middleware.rate_limiting.RateLimitingConfig", "sqlalchemy.ext.asyncio.AsyncSession"],
    "backend/app/api/v1/endpoints/auth_logout.py": ["typing.Optional"],
    "backend/app/api/v1/endpoints/backup.py": ["core.backup_manager.BackupType"],
    "backend/app/api/v1/endpoints/monitoring.py": ["datetime.timedelta", "typing.Optional", "pydantic.Field"],
    "backend/app/api/v1/endpoints/postgres_optimization.py": ["typing.Optional"],
    "backend/app/api/v1/endpoints/rate_limit.py": ["fastapi.Depends", "core.auth.get_current_admin_user"],
    "backend/app/api/v1/endpoints/session.py": ["typing.Dict", "typing.Any", "middleware.session_middleware.require_session", "middleware.session_middleware.create_session"],
    "backend/app/api/v1/endpoints/token_blacklist.py": ["services.token_blacklist.BlacklistEntry", "core.config.settings"],
    "backend/app/core/backup_manager.py": ["psutil"],
    "backend/app/core/config.py": ["env_config.Environment", "env_config.EnvironmentManager"],
    "backend/app/core/database.py": ["sqlalchemy.ext.declarative.declarative_base"],
    "backend/app/core/db_monitoring.py": ["asyncio", "json", "typing.Optional", "typing.Tuple", "pathlib.Path", "config.settings"],
    "backend/app/core/db_performance.py": ["typing.Optional", "sqlalchemy.engine.Result", "asyncio"],
    "backend/app/core/db_security.py": ["asyncio", "typing.Optional", "typing.Tuple", "cryptography"],
    "backend/app/core/env_config.py": ["typing.Any", "pydantic.field_validator"],
    "backend/app/core/error_codes.py": ["typing.Any"],
    "backend/app/core/error_integration.py": ["exceptions.AuthorizationException", "exceptions.ConfigurationException"],
    "backend/app/core/error_messages.py": ["typing.Union"],
    "backend/app/core/exceptions.py": ["typing.List", "fastapi.status", "error_codes.UserAction"],
    "backend/app/core/language_detection.py": ["typing.List", "re"],
    "backend/app/core/postgres_optimizer.py": ["typing.Tuple"],
    "backend/app/core/response_schemas.py": ["typing.Union", "datetime.datetime", "enum.Enum", "error_codes.UserAction", "error_codes.ErrorSeverity"],
    "backend/app/core/schema_validation.py": ["json", "jsonschema"],
    "backend/app/core/security.py": ["asyncio", "functools.lru_cache", "exceptions.AuthorizationException", "exceptions.ConfigurationException", "exceptions.ValidationException"],
    "backend/app/crud/file.py": ["sqlalchemy.or_", "sqlalchemy.update", "sqlalchemy.orm.selectinload", "os", "models.file.FileShare", "models.workspace.Workspace", "schemas.file.FileShareCreate", "schemas.file.FileCopyRequest"],
    "backend/app/crud/workspace.py": ["models.workspace.MVPModuleLog", "schemas.workspace.WorkspaceGroupUpdate"],
    "backend/app/middleware/error_handling.py": ["typing.Optional", "fastapi.Response", "fastapi.status", "core.exceptions.handle_oauth_error", "core.response_schemas.ErrorResponseSchema"],
    "backend/app/middleware/rate_limiting.py": ["time", "typing.Any", "fastapi.HTTPException", "services.rate_limiter.SlidingWindowRateLimiter"],
    "backend/app/repositories/workspace_repository.py": ["sqlalchemy.and_", "sqlalchemy.or_", "sqlalchemy.orm.joinedload", "models.workspace.MVPModule", "services.query_builder.QueryOptimizationLevel"],
    "backend/app/routers/auth_proxy.py": ["fastapi.Request", "app.core.security.validate_bearer_token"],
    "backend/app/routers/files.py": ["fastapi.responses.StreamingResponse", "typing.List", "pathlib.Path", "core.security.require_admin", "crud.workspace.workspace_crud", "schemas.file.FileCopyRequest"],
    "backend/app/routers/health.py": ["typing.Dict", "typing.Any", "typing.Optional"],
    "backend/app/routers/mvp_modules.py": ["fastapi.UploadFile", "fastapi.File", "typing.List"],
    "backend/app/routers/oauth.py": ["typing.Dict", "typing.Any"],
    "backend/app/routers/personal_test_process_flow.py": ["app.core.security.require_admin"],
    "backend/app/routers/workspaces.py": ["core.security.AuthorizationError", "schemas.workspace.WorkspaceGroupCreate", "schemas.workspace.WorkspaceGroupUpdate", "schemas.workspace.WorkspaceTree"],
    "backend/app/routers/workspaces_v2.py": ["typing.List", "typing.Optional", "core.security.require_workspace_permission", "core.config.settings", "schemas.workspace.WorkspaceGroup", "schemas.workspace.WorkspaceGroupCreate", "schemas.workspace.WorkspaceGroupUpdate", "schemas.workspace.MVPModule", "schemas.workspace.MVPModuleCreate", "schemas.workspace.MVPModuleUpdate", "schemas.workspace.MVPModuleListResponse", "schemas.workspace.PermissionCheckRequest", "schemas.workspace.PermissionCheckResponse", "schemas.workspace.WorkspaceStats", "schemas.workspace.WorkspaceTree", "schemas.workspace.WorkspaceTreeResponse"],
    "backend/app/services/dynamic_loader.py": ["os", "importlib.util", "fastapi.Depends", "fastapi.HTTPException", "app.core.database.get_db", "app.core.security.get_current_active_user"],
    "backend/app/services/external_api.py": ["typing.Optional", "fastapi.HTTPException", "fastapi.status"],
    "backend/app/services/performance_monitor.py": ["typing.Optional", "datetime.timedelta"],
    "backend/app/services/permission_service.py": ["sqlalchemy.exists", "sqlalchemy.orm.selectinload"],
    "backend/app/services/query_builder.py": ["typing.Union", "sqlalchemy.join", "sqlalchemy.outerjoin", "sqlalchemy.orm.Query", "sqlalchemy.orm.contains_eager"],
    "backend/app/services/rate_limiter.py": ["json", "typing.Tuple"],
    "backend/app/services/session_manager.py": ["json", "hashlib", "hmac", "dataclasses.asdict"],
    "backend/app/services/user_mapping.py": ["hashlib", "sqlalchemy.ext.asyncio.AsyncSession", "core.security.verify_token_with_auth_server"],
    "backend/app/services/websocket_manager.py": ["json"],
    "backend/app/services/workspace_manager.py": ["os"],
    "backend/app/services/data_providers/__init__.py": ["aioodbc"],
    "backend/app/services/data_providers/api.py": ["json", "urllib.parse.urljoin"],
    "backend/app/services/data_providers/api_old.py": ["json", "urllib.parse.urljoin", "base.EquipmentData", "base.MeasurementData"],
    "backend/app/services/data_providers/connection_pool.py": ["typing.Optional", "datetime.timedelta", "sqlalchemy.pool.QueuePool"],
    "backend/app/services/data_providers/dynamic.py": ["datetime.datetime", "asyncio", "asyncpg"],
    "backend/app/services/data_providers/mssql.py": ["typing.Union"],
    "backend/app/services/data_providers/postgresql_provider.py": ["datetime.datetime"]
  }
}