import { useEffect, useRef, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import { authService } from '../services/authService';
import { refreshTokenService } from '../services/refreshTokenService';
import { isSafePageForTokenRefresh } from '../utils/silentAuth';

/**
 * ÏûêÎèô ÌÜ†ÌÅ∞ Í∞±Ïã† ÌõÖ
 * Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÏùò ÌÜ†ÌÅ∞ÏùÑ ÏûêÎèôÏúºÎ°ú Í∞±Ïã†Ìï©ÎãàÎã§.
 * React Strict ModeÏóêÏÑúÏùò Ïù¥Ï§ë Ïã§ÌñâÏùÑ Î∞©ÏßÄÌï©ÎãàÎã§.
 */
export const useAuthRefresh = () => {
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const location = useLocation();
  const cleanupRef = useRef<(() => void) | null>(null);
  const isInitializedRef = useRef(false);
  const lastLocationRef = useRef(location.pathname);

  useEffect(() => {
    // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Í∞êÏßÄ
    const currentPath = location.pathname;
    const hasLocationChanged = lastLocationRef.current !== currentPath;
    lastLocationRef.current = currentPath;

    // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóêÏÑú ÌÜ†ÌÅ∞ Í∞±Ïã†Ïù¥ ÏïàÏ†ÑÌïúÏßÄ ÌôïÏù∏
    const isSafePage = isSafePageForTokenRefresh();
    
    // React Strict ModeÏóêÏÑú Ïù¥Ï§ë Ïã§Ìñâ Î∞©ÏßÄ
    if (isInitializedRef.current && isAuthenticated && cleanupRef.current && !hasLocationChanged && isSafePage) {
      console.log('üîÑ Token refresh already initialized, skipping...');
      return;
    }

    // Í∏∞Ï°¥ Í∞±Ïã† Ï†ïÎ¶¨ (ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ïãú ÎòêÎäî ÏïàÏ†ÑÌïòÏßÄ ÏïäÏùÄ ÌéòÏù¥ÏßÄ)
    if (cleanupRef.current) {
      console.log('üõë Cleaning up existing token refresh');
      cleanupRef.current();
      cleanupRef.current = null;
      isInitializedRef.current = false;
    }

    if (isAuthenticated && isSafePage) {
      console.log('üîÑ Starting automatic token refresh on safe page:', currentPath);
      
      // ÏûêÎèô ÌÜ†ÌÅ∞ Í∞±Ïã† ÏãúÏûë
      cleanupRef.current = authService.startAutoTokenRefresh();
      isInitializedRef.current = true;
      
      return () => {
        if (cleanupRef.current) {
          console.log('üõë Stopping automatic token refresh (cleanup)');
          cleanupRef.current();
          cleanupRef.current = null;
        }
        isInitializedRef.current = false;
      };
    } else if (isAuthenticated && !isSafePage) {
      console.log('üîê Page not safe for token refresh, disabling auto refresh:', currentPath);
      isInitializedRef.current = false;
    } else {
      // Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
      console.log('üõë User not authenticated, stopping token refresh');
      isInitializedRef.current = false;
    }
  }, [isAuthenticated, location.pathname]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (cleanupRef.current) {
        console.log('üõë Component unmounting, cleaning up token refresh');
        cleanupRef.current();
        cleanupRef.current = null;
      }
      isInitializedRef.current = false;
    };
  }, []);
};

/**
 * ÌÜ†ÌÅ∞ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ ÌõÖ - Refresh Token ÏßÄÏõê
 * Access TokenÍ≥º Refresh TokenÏùò ÏÉÅÌÉúÎ•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Î™®ÎãàÌÑ∞ÎßÅÌï©ÎãàÎã§.
 */
export const useTokenStatus = () => {
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const [tokenStatus, setTokenStatus] = useState({
    accessTokenTimeToExpiry: 0,
    refreshTokenTimeToExpiry: 0,
    needsAccessTokenRefresh: false,
    needsReAuthentication: false,
    refreshMethod: null as 'refresh_token' | 'silent_auth' | null,
    lastRefreshAttempt: null as Date | null,
    isNearExpiry: false,
    isRefreshTokenValid: false
  });

  // ÌÜ†ÌÅ∞ ÏÉÅÌÉúÎ•º Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const updateTokenStatus = () => {
      if (!isAuthenticated) {
        setTokenStatus({
          accessTokenTimeToExpiry: 0,
          refreshTokenTimeToExpiry: 0,
          needsAccessTokenRefresh: false,
          needsReAuthentication: false,
          refreshMethod: null,
          lastRefreshAttempt: null,
          isNearExpiry: false,
          isRefreshTokenValid: false
        });
        return;
      }

      const accessTokenTimeToExpiry = authService.getTokenTimeToExpiry();
      const refreshTokenTimeToExpiry = refreshTokenService.getRefreshTokenTimeToExpiry();
      const needsAccessTokenRefresh = authService.needsTokenRefresh();
      const isRefreshTokenValid = refreshTokenService.isRefreshTokenValid();
      const isNearExpiry = accessTokenTimeToExpiry <= 300; // 5Î∂Ñ Ïù¥ÎÇ¥
      
      // Ïû¨Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÌåêÎã®
      const needsReAuthentication = !isRefreshTokenValid && 
                                   (accessTokenTimeToExpiry <= 0 || !isSafePageForTokenRefresh());
      
      // Í∞±Ïã† Î∞©Î≤ï Í≤∞Ï†ï
      let refreshMethod: 'refresh_token' | 'silent_auth' | null = null;
      if (needsAccessTokenRefresh && isRefreshTokenValid) {
        refreshMethod = 'refresh_token';
      } else if (needsAccessTokenRefresh && isSafePageForTokenRefresh()) {
        refreshMethod = 'silent_auth';
      }

      // ÎßàÏßÄÎßâ Í∞±Ïã† ÏãúÎèÑ ÏãúÍ∞Ñ Í∞ÄÏ†∏Ïò§Í∏∞
      const lastRefreshStr = localStorage.getItem('lastTokenRefresh');
      const lastRefreshAttempt = lastRefreshStr ? new Date(parseInt(lastRefreshStr)) : null;

      setTokenStatus({
        accessTokenTimeToExpiry,
        refreshTokenTimeToExpiry,
        needsAccessTokenRefresh,
        needsReAuthentication,
        refreshMethod,
        lastRefreshAttempt,
        isNearExpiry,
        isRefreshTokenValid
      });
    };

    // Ï¥àÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏
    updateTokenStatus();

    // 10Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
    const interval = setInterval(updateTokenStatus, 10000);

    return () => clearInterval(interval);
  }, [isAuthenticated]);

  return tokenStatus;
};

/**
 * ÌÜ†ÌÅ∞ ÎßåÎ£å ÏïåÎ¶º ÌõÖ
 * ÌÜ†ÌÅ∞ ÎßåÎ£å ÏãúÏ†êÏóê Îî∞Îùº Ï†ÅÏ†àÌïú ÏïåÎ¶ºÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 */
export const useTokenExpiryNotification = () => {
  const tokenStatus = useTokenStatus();
  const [notifications, setNotifications] = useState<Array<{
    type: 'warning' | 'info' | 'error';
    message: string;
    action?: string;
  }>>([]);

  useEffect(() => {
    const newNotifications: Array<{
      type: 'warning' | 'info' | 'error';
      message: string;
      action?: string;
    }> = [];

    // Refresh Token ÎßåÎ£å 1Ïùº Ï†Ñ ÏïåÎ¶º
    if (tokenStatus.isRefreshTokenValid && tokenStatus.refreshTokenTimeToExpiry <= 86400) { // 1Ïùº
      newNotifications.push({
        type: 'warning',
        message: 'Your session will expire soon. Please log in again to maintain access.',
        action: 'login'
      });
    }

    // Access Token ÎßåÎ£å ÏûÑÎ∞ï ÏïåÎ¶º (Refresh TokenÏù¥ ÏóÜÎäî Í≤ΩÏö∞)
    if (!tokenStatus.isRefreshTokenValid && tokenStatus.isNearExpiry) {
      newNotifications.push({
        type: 'warning',
        message: 'Your session will expire in a few minutes. Please save your work.',
        action: 'save'
      });
    }

    // Ïû¨Ïù∏Ï¶ù ÌïÑÏöî ÏïåÎ¶º
    if (tokenStatus.needsReAuthentication) {
      newNotifications.push({
        type: 'error',
        message: 'Your session has expired. Please log in again.',
        action: 'login'
      });
    }

    // ÏûêÎèô Í∞±Ïã† Ïã§Ìå® ÏïåÎ¶º (5Î∂Ñ Ïù¥ÏÉÅ Í∞±Ïã†Ïù¥ Ïïà Îêú Í≤ΩÏö∞)
    if (tokenStatus.lastRefreshAttempt) {
      const timeSinceLastRefresh = Date.now() - tokenStatus.lastRefreshAttempt.getTime();
      if (timeSinceLastRefresh > 5 * 60 * 1000 && tokenStatus.needsAccessTokenRefresh) {
        newNotifications.push({
          type: 'info',
          message: 'Automatic token refresh is having issues. Your session may expire soon.',
          action: 'refresh'
        });
      }
    }

    setNotifications(newNotifications);
  }, [tokenStatus]);

  return notifications;
};