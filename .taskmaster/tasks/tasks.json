{
  "master": {
    "tasks": [
      {
        "id": 21,
        "title": "데이터베이스 스키마 및 모델 구현",
        "description": "Process Monitoring System을 위한 PostgreSQL 데이터베이스 스키마 설계 및 SQLAlchemy 모델 구현",
        "details": "PostgreSQL 데이터베이스에 프로세스 플로우, 버전 관리, 장비 마스터 데이터, 측정값, 사용자 권한, 퍼블리싱 토큰을 위한 테이블 생성. SQLAlchemy async 모델 정의하고 마이그레이션 스크립트 작성. JSONB를 사용한 플로우 데이터 저장, 버전 히스토리 관리, 소프트 삭제 구현. 인덱스 최적화 및 데이터 보존 정책 적용.",
        "testStrategy": "마이그레이션 테스트, 모델 CRUD 작업 테스트, 데이터 무결성 검증, 성능 테스트 (500+ 노드 플로우), 동시성 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "프로세스 플로우 테이블 및 모델 구현",
            "description": "프로세스 플로우 저장을 위한 테이블 생성 및 SQLAlchemy 모델 정의",
            "dependencies": [],
            "details": "flows 테이블 생성: id(UUID), name, description, flow_data(JSONB), version, created_at, updated_at, deleted_at. SQLAlchemy async 모델 정의, JSONB 활용한 플로우 노드/엣지 데이터 저장, 소프트 삭제 구현. 인덱스 설정: name, version, created_at, deleted_at",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "버전 관리 시스템 테이블 및 모델 구현",
            "description": "플로우 버전 히스토리 관리를 위한 테이블 생성 및 모델 정의",
            "dependencies": [
              "21.1"
            ],
            "details": "flow_versions 테이블 생성: id(UUID), flow_id(FK), version_number, changes(JSONB), author_id, created_at, comment. flow_snapshots 테이블: 전체 플로우 스냅샷 저장. 버전 비교, 롤백 기능 지원. 복합 인덱스: (flow_id, version_number), (flow_id, created_at)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "장비 마스터 데이터 테이블 및 모델 구현",
            "description": "장비 정보 및 메타데이터 관리를 위한 테이블 생성 및 모델 정의",
            "dependencies": [],
            "details": "equipments 테이블: id(UUID), name, type, specifications(JSONB), location, status, installed_at, created_at, updated_at. equipment_types 테이블: 장비 유형별 기본 속성. equipment_connections 테이블: 장비 간 연결 관계. 인덱스 설정: type, location, status",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "측정값 저장 테이블 및 모델 구현",
            "description": "실시간 측정 데이터 저장을 위한 테이블 생성 및 모델 정의",
            "dependencies": [
              "21.3"
            ],
            "details": "measurements 테이블: id(UUID), equipment_id(FK), flow_id(FK), timestamp, value(JSONB), unit, quality, created_at. measurement_history 테이블: 시간별 집계 데이터. 파티셔닝 설정 (월별), TTL 정책 적용. 시계열 인덱스: (equipment_id, timestamp), (flow_id, timestamp)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "사용자 권한 관리 테이블 및 모델 구현",
            "description": "사용자 권한 및 역할 관리를 위한 테이블 생성 및 모델 정의",
            "dependencies": [],
            "details": "users 테이블: MaxPlatform 사용자 정보 동기화. user_roles 테이블: admin, editor, viewer 역할 정의. user_permissions 테이블: 플로우별 세분화된 권한. flow_access_logs 테이블: 접근 로그. 인덱스: user_id, role, (flow_id, user_id)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "퍼블리싱 토큰 관리 및 마이그레이션 시스템 구현",
            "description": "공개 액세스 토큰 관리 테이블 생성 및 Alembic 마이그레이션 설정",
            "dependencies": [
              "21.1",
              "21.5"
            ],
            "details": "public_tokens 테이블: id(UUID), flow_id(FK), token, expires_at, created_by, access_count, last_accessed. token_access_logs 테이블: 접근 기록. Alembic 마이그레이션 스크립트 작성, 초기 데이터 시드, 롤백 시나리오. 데이터베이스 연결 풀 설정, 백업 전략 수립",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 22,
        "title": "FastAPI 백엔드 기본 구조 및 인증 시스템 구축",
        "description": "FastAPI 프레임워크 기반 백엔드 API 서버 구축 및 MaxPlatform SSO 통합",
        "details": "FastAPI 애플리케이션 초기 설정, OAuth2/OIDC MaxPlatform 통합, JWT 토큰 검증 미들웨어, 사용자 권한 관리 시스템 구현. CORS, 보안 헤더, 속도 제한 설정. PostgreSQL 연결 풀링, Redis 캐싱 설정. OpenAPI 문서 자동 생성 구성. 환경별 설정 관리 (.env).",
        "testStrategy": "인증 플로우 테스트, 토큰 검증 테스트, 권한 부여 테스트, API 엔드포인트 기본 테스트, 보안 헤더 검증",
        "priority": "high",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "FastAPI 프로젝트 초기 설정 및 의존성 구성",
            "description": "FastAPI 프로젝트 기본 구조 생성, 필수 의존성 설치, 개발 환경 설정 및 프로젝트 디렉토리 구조 구성",
            "dependencies": [],
            "details": "requirements.txt 파일 생성 및 FastAPI, uvicorn, pydantic, python-dotenv 등 핵심 의존성 추가. 프로젝트 디렉토리 구조 생성 (app/, models/, routers/, middleware/, config/). .env 템플릿 파일 생성, gitignore 설정. main.py 기본 FastAPI 애플리케이션 엔트리포인트 생성.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "MaxPlatform SSO OAuth2/OIDC 통합 구현",
            "description": "MaxPlatform과의 OAuth2/OIDC 인증 흐름 구현 및 JWT 토큰 검증 시스템 구축",
            "dependencies": [
              "22.1"
            ],
            "details": "OAuth2 클라이언트 설정, OIDC 디스커버리 엔드포인트 연동. JWT 토큰 검증 미들웨어 구현, 토큰 디코딩 및 서명 검증. 사용자 정보 추출 및 세션 관리. RefreshToken 처리 로직. MaxPlatform SSO 연동을 위한 환경 변수 설정 (.env).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "보안 미들웨어 및 CORS 설정 구현",
            "description": "보안 헤더, CORS 정책, 속도 제한 등 보안 관련 미들웨어 구성",
            "dependencies": [
              "22.1"
            ],
            "details": "CORS 미들웨어 설정 (허용 도메인, 헤더, 메서드). 보안 헤더 미들웨어 (X-Frame-Options, CSP, HSTS). Rate Limiting 미들웨어 구현 (slowapi 사용). 요청 로깅 미들웨어, 에러 핸들링 미들웨어. 입력 검증 및 XSS 방지 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "데이터베이스 연결 및 Redis 캐시 설정",
            "description": "PostgreSQL 데이터베이스 연결 풀링 설정 및 Redis 캐시 연동 구현",
            "dependencies": [
              "22.1"
            ],
            "details": "SQLAlchemy ORM 설정 및 PostgreSQL 연결 풀링 구성. 데이터베이스 마이그레이션 설정 (Alembic). Redis 클라이언트 설정, 연결 풀 관리. 데이터베이스 헬스체크 엔드포인트. 비동기 데이터베이스 세션 관리 (AsyncSession). 환경별 DB 설정 분리.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "OpenAPI 문서화 및 사용자 권한 시스템 구현",
            "description": "자동 API 문서 생성 설정 및 역할 기반 권한 관리 시스템 구축",
            "dependencies": [
              "22.2",
              "22.4"
            ],
            "details": "OpenAPI 스키마 커스터마이징, Swagger UI 설정. API 엔드포인트 문서화 (태그, 설명, 예제). 역할 기반 접근 제어 (RBAC) 시스템 구현. 권한 데코레이터, 권한 검증 의존성. 사용자 모델 및 권한 모델 정의. API 버전 관리 설정.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 23,
        "title": "React 19.1.0 프론트엔드 기본 구조 및 테마 시스템 구현",
        "description": "React 19.1.0 기반 프론트엔드 애플리케이션 초기 구조 및 light/dark 테마 시스템 구현",
        "details": "React 19.1.0 + TypeScript 프로젝트 설정, Vite 빌드 도구 구성, Tailwind CSS 커스텀 테마 설정. Zustand 상태 관리 설정, React Router 라우팅 구성. Light/Dark 테마 전환 기능, 시스템 선호도 감지, 테마 전환 애니메이션. MaxLab 디자인 시스템 통합, 공통 컴포넌트 라이브러리 구축. Heroicons/Lucide 아이콘 라이브러리 설정.",
        "testStrategy": "컴포넌트 렌더링 테스트, 테마 전환 테스트, 반응형 디자인 테스트, 접근성 테스트, 크로스 브라우저 호환성 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "React 19.1.0 프로젝트 초기 설정 및 개발 환경 구성",
            "description": "React 19.1.0 + TypeScript + Vite 기반 프로젝트 초기화 및 개발 도구 설정",
            "dependencies": [],
            "details": "React 19.1.0 프로젝트 생성, TypeScript 설정, Vite 빌드 도구 구성, ESLint/Prettier 설정, 디렉토리 구조 설계, 개발 서버 설정 및 HMR 확인",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "상태 관리 및 라우팅 시스템 구성",
            "description": "Zustand 상태 관리 라이브러리 설정 및 React Router 라우팅 구성",
            "dependencies": [
              "23.1"
            ],
            "details": "Zustand 설치 및 전역 상태 스토어 구성, React Router v6 설정, 중첩 라우팅 구조 설계, 페이지 컴포넌트 기본 구조 생성, 네비게이션 가드 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "테마 시스템 및 스타일링 구현",
            "description": "Tailwind CSS 기반 light/dark 테마 시스템 구현 및 MaxLab 디자인 시스템 통합",
            "dependencies": [
              "23.1"
            ],
            "details": "Tailwind CSS 설치 및 커스텀 설정, light/dark 테마 토글 기능 구현, 시스템 선호도 감지, CSS 변수 기반 테마 전환, 테마 전환 애니메이션, MaxLab 색상 팔레트 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "공통 컴포넌트 라이브러리 및 아이콘 시스템 구축",
            "description": "재사용 가능한 UI 컴포넌트 라이브러리 구축 및 아이콘 시스템 설정",
            "dependencies": [
              "23.2",
              "23.3"
            ],
            "details": "Heroicons/Lucide 아이콘 라이브러리 설치, Button, Input, Modal, Card 등 기본 컴포넌트 구현, Storybook 설정 (선택사항), 컴포넌트 타입 정의, 접근성 지원 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 24,
        "title": "플로우 관리 시스템 및 버전 관리 구현",
        "description": "프로세스 플로우 CRUD 작업, 버전 관리, 검색/필터링 기능을 포함한 플로우 관리 시스템 구현",
        "details": "플로우 생성, 수정, 삭제, 조회 API 엔드포인트 구현. 버전 관리 시스템 (최대 100개 버전), diff 비교 기능. 플로우 목록 화면, 검색 및 필터링 (생성자, 날짜, 상태). 배치 작업 (삭제, 아카이브, 내보내기), 메타데이터 관리. 액세스 제어 및 권한 시스템. Import/Export 기능 (JSON/XML 형식).",
        "testStrategy": "플로우 CRUD 테스트, 버전 관리 테스트, 검색/필터링 테스트, 권한 테스트, 대용량 플로우 처리 테스트",
        "priority": "high",
        "dependencies": [
          21,
          22
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "플로우 CRUD API 엔드포인트 구현",
            "description": "플로우 생성, 읽기, 수정, 삭제를 위한 RESTful API 엔드포인트 구현",
            "dependencies": [],
            "details": "플로우 생성 API (POST /api/flows), 플로우 조회 API (GET /api/flows/{id}), 플로우 목록 조회 API (GET /api/flows), 플로우 수정 API (PUT /api/flows/{id}), 플로우 삭제 API (DELETE /api/flows/{id}). 요청/응답 모델 정의, 유효성 검사, 에러 핸들링 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "플로우 버전 관리 시스템 구현",
            "description": "플로우의 버전 히스토리 관리 및 diff 비교 기능 구현",
            "dependencies": [
              "24.1"
            ],
            "details": "플로우 버전 저장 메커니즘, 최대 100개 버전 제한 및 순환 정책. 버전 간 diff 비교 알고리즘, 변경 사항 시각화. 버전 롤백 기능, 버전 태깅 및 메모 기능. 버전 히스토리 조회 API (GET /api/flows/{id}/versions).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "플로우 검색 및 필터링 시스템 구현",
            "description": "플로우 목록에 대한 검색, 필터링, 정렬 기능 구현",
            "dependencies": [
              "24.1"
            ],
            "details": "텍스트 검색 기능 (제목, 설명), 고급 필터링 (생성자, 생성일/수정일 범위, 상태, 태그). 정렬 옵션 (이름, 생성일, 수정일, 상태), 페이지네이션 지원. 검색 결과 캐싱, 실시간 검색 제안 기능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "배치 작업 처리 시스템 구현",
            "description": "다중 플로우에 대한 배치 작업 (삭제, 아카이브, 내보내기) 기능 구현",
            "dependencies": [
              "24.1"
            ],
            "details": "선택된 플로우들에 대한 배치 삭제, 배치 아카이브/복원 기능. 배치 내보내기 (JSON/XML 형식), 진행 상황 추적. 배치 작업 큐 시스템, 백그라운드 처리. 작업 결과 알림 및 로그 기능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "플로우 권한 및 액세스 제어 시스템 구현",
            "description": "플로우별 사용자 권한 관리 및 액세스 제어 기능 구현",
            "dependencies": [
              "24.1"
            ],
            "details": "플로우 소유자 및 공유 권한 시스템 (읽기, 수정, 실행 권한). 사용자 그룹 기반 권한 관리, 권한 상속 메커니즘. 플로우 공개/비공개 설정, 팀 내 공유 기능. 권한 확인 미들웨어 및 데코레이터 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "플로우 Import/Export 기능 구현",
            "description": "플로우 데이터의 가져오기/내보내기 기능을 JSON 및 XML 형식으로 구현",
            "dependencies": [
              "24.2",
              "24.4"
            ],
            "details": "플로우 JSON/XML 스키마 정의, 데이터 직렬화/역직렬화. 플로우 내보내기 API (단일/다중), 파일 다운로드 지원. 플로우 가져오기 API, 충돌 해결 메커니즘. 가져오기/내보내기 진행 상황 추적, 검증 및 에러 핸들링.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 25,
        "title": "ReactFlow 기반 플로우 에디터 핵심 기능 구현",
        "description": "ReactFlow 11.11.4를 사용한 화학공정 다이어그램 에디터 구현 및 노드/엣지 타입 정의",
        "details": "ReactFlow 11.11.4 설치 및 설정, 화학공정 특화 노드 타입 구현 (장비, 계측기, 스트림, 주석). 엣지 타입 정의 (물질 흐름, 에너지 흐름, 정보 흐름). 드래그 앤 드롭 기능, 노드/엣지 추가/삭제/편집. 컨텍스트 메뉴, 키보드 단축키 지원. 줌/팬 기능, 미니맵, 컨트롤 패널. 실시간 유효성 검증, 충돌 감지.",
        "testStrategy": "노드/엣지 조작 테스트, 드래그 앤 드롭 테스트, 키보드 단축키 테스트, 대용량 다이어그램 성능 테스트, 실시간 유효성 검증 테스트",
        "priority": "high",
        "dependencies": [
          23,
          24
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ReactFlow 프로젝트 설정 및 기본 구조 구축",
            "description": "ReactFlow 11.11.4 설치 및 프로젝트 초기 설정",
            "dependencies": [],
            "details": "ReactFlow 11.11.4 패키지 설치, 프로젝트 구조 설정, 기본 컴포넌트 구조 및 타입 정의, 프로바이더 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "화학공정 특화 노드 타입 구현",
            "description": "장비, 계측기, 스트림, 주석 등 화학공정 전용 노드 타입 개발",
            "dependencies": [
              "25.1"
            ],
            "details": "장비 노드(펌프, 탱크, 열교환기), 계측기 노드(온도, 압력, 유량계), 스트림 노드, 주석 노드 컴포넌트 구현 및 스타일링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "엣지 타입 및 연결 시스템 구현",
            "description": "물질 흐름, 에너지 흐름, 정보 흐름을 위한 엣지 타입 정의",
            "dependencies": [
              "25.2"
            ],
            "details": "물질 흐름 엣지(파이프라인), 에너지 흐름 엣지(전기, 스팀), 정보 흐름 엣지(신호선) 구현 및 연결 검증 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "드래그앤드롭 및 노드 편집 기능 구현",
            "description": "노드/엣지 추가, 삭제, 편집을 위한 드래그앤드롭 시스템 구축",
            "dependencies": [
              "25.3"
            ],
            "details": "팔레트에서 캔버스로 드래그앤드롭, 노드 속성 편집 패널, 컨텍스트 메뉴, 다중 선택 및 그룹 편집 기능",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "UI 컨트롤 및 네비게이션 시스템 구현",
            "description": "줌/팬, 미니맵, 컨트롤 패널, 키보드 단축키 지원",
            "dependencies": [
              "25.4"
            ],
            "details": "줌 인/아웃, 팬 기능, 미니맵 컴포넌트, 컨트롤 패널(저장, 되돌리기, 다시하기), 키보드 단축키 바인딩",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "실시간 검증 및 충돌 감지 시스템 구현",
            "description": "다이어그램 유효성 검증과 실시간 충돌 감지 로직 구현",
            "dependencies": [
              "25.2",
              "25.3"
            ],
            "details": "노드 연결 규칙 검증, 순환 참조 감지, 실시간 오류 표시, 경고 메시지 시스템, 자동 수정 제안 기능",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "대용량 다이어그램 성능 최적화",
            "description": "500+ 노드 처리를 위한 가상화 및 성능 최적화 구현",
            "dependencies": [
              "25.1",
              "25.2",
              "25.3"
            ],
            "details": "ReactFlow 가상화 설정, 지연 로딩 구현, 렌더링 최적화, 메모리 사용량 최적화, 대용량 데이터 처리 로직",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 26,
        "title": "자동 저장 및 충돌 해결 시스템 구현",
        "description": "에디터의 자동 저장 기능, 충돌 해결, Undo/Redo 시스템 구현",
        "details": "자동 저장 시스템 (5초 간격), 네트워크 오류 처리 및 재시도 로직. 다중 사용자 충돌 감지 및 해결 시스템, 최종 쓰기 승리 전략. Undo/Redo 스택 관리, 액션 히스토리 추적. 오프라인 지원, 로컬 스토리지 백업. 변경 사항 표시 및 저장 상태 인디케이터.",
        "testStrategy": "자동 저장 테스트, 충돌 시나리오 테스트, Undo/Redo 기능 테스트, 네트워크 중단 테스트, 오프라인 모드 테스트",
        "priority": "medium",
        "dependencies": [
          25
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "자동 저장 메커니즘 구현",
            "description": "에디터의 자동 저장 기능을 구현합니다. 5초 간격으로 변경사항을 자동 저장하고 네트워크 오류 처리 및 재시도 로직을 포함합니다.",
            "dependencies": [],
            "details": "자동 저장 타이머 설정, 디바운싱 로직 구현, 네트워크 오류 감지 및 재시도 메커니즘, 저장 상태 추적 및 표시, 백그라운드 저장 프로세스 관리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "충돌 감지 및 해결 시스템 구현",
            "description": "다중 사용자 환경에서 동시 편집 시 발생하는 충돌을 감지하고 해결하는 시스템을 구현합니다. 최종 쓰기 승리 전략을 적용합니다.",
            "dependencies": [
              "26.1"
            ],
            "details": "버전 관리 시스템, 충돌 감지 알고리즘, 최종 쓰기 승리 전략 구현, 사용자 알림 시스템, 충돌 해결 UI 컴포넌트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Undo/Redo 시스템 구현",
            "description": "사용자 액션의 히스토리를 추적하고 Undo/Redo 기능을 제공하는 시스템을 구현합니다.",
            "dependencies": [
              "26.1"
            ],
            "details": "액션 히스토리 스택 관리, Undo/Redo 명령 처리, 메모리 최적화된 스택 구조, 키보드 단축키 지원, 액션 타입별 처리 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "오프라인 지원 시스템 구현",
            "description": "네트워크 연결이 끊어진 상황에서도 에디터가 동작하도록 오프라인 지원 기능을 구현합니다.",
            "dependencies": [
              "26.2"
            ],
            "details": "로컬 스토리지 백업 시스템, 네트워크 상태 감지, 오프라인 모드 전환, 온라인 복구 시 동기화, IndexedDB 활용한 대용량 데이터 저장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "상태 표시 및 사용자 피드백 시스템 구현",
            "description": "저장 상태, 충돌 상황, 오프라인 모드 등을 사용자에게 시각적으로 표시하는 시스템을 구현합니다.",
            "dependencies": [
              "26.3",
              "26.4"
            ],
            "details": "저장 상태 인디케이터, 변경사항 표시 UI, 충돌 알림 시스템, 오프라인 상태 표시, 사용자 가이드 툴팁, 에러 메시지 표시",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 27,
        "title": "외부 데이터 소스 연동 및 실시간 데이터 통합",
        "description": ".env 기반 외부 데이터베이스 연결 설정 및 실시간 데이터 스트리밍 시스템 구현",
        "details": "다중 데이터베이스 지원 (MSSQL, Oracle, PostgreSQL), .env 설정 기반 동적 연결. 데이터 소스 설정 UI, 연결 테스트 기능. WebSocket/SSE 실시간 데이터 스트리밍, MQTT IoT 센서 데이터 통합. 데이터 매핑 및 변환, 단위 변환. 연결 풀 관리, 장애 복구, 서킷 브레이커 패턴.",
        "testStrategy": "데이터베이스 연결 테스트, 실시간 데이터 스트리밍 테스트, 연결 장애 복구 테스트, 성능 테스트 (100+ 동시 연결)",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 연결 관리 시스템 구현",
            "description": ".env 기반 다중 데이터베이스 (MSSQL, Oracle, PostgreSQL) 동적 연결 및 연결 풀 관리 시스템 구현",
            "dependencies": [],
            "details": ".env 파일에서 데이터베이스 설정 읽기, 동적 연결 문자열 생성, 연결 풀 관리, 연결 상태 모니터링, 타임아웃 및 재시도 로직 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "데이터 소스 설정 UI 구현",
            "description": "데이터베이스 연결 설정 및 테스트를 위한 관리자 UI 인터페이스 구현",
            "dependencies": [
              "27.1"
            ],
            "details": "데이터소스 추가/수정/삭제 폼, 연결 테스트 기능, 설정 유효성 검증, 연결 상태 실시간 표시, 에러 메시지 처리 UI",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "실시간 데이터 스트리밍 시스템 구현",
            "description": "WebSocket/SSE 기반 실시간 데이터 스트리밍 및 클라이언트 동기화 시스템 구현",
            "dependencies": [
              "27.1"
            ],
            "details": "WebSocket 서버 설정, SSE 엔드포인트 구현, 실시간 데이터 브로드캐스팅, 클라이언트 연결 관리, 메시지 큐잉 및 배치 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "IoT 데이터 통합 시스템 구현",
            "description": "MQTT 프로토콜을 통한 IoT 센서 데이터 수집 및 통합 시스템 구현",
            "dependencies": [
              "27.3"
            ],
            "details": "MQTT 브로커 연결, 센서 데이터 구독, 데이터 파싱 및 검증, 센서 등록/해제 관리, 데이터 품질 모니터링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "데이터 변환 및 매핑 시스템 구현",
            "description": "다양한 데이터 소스의 데이터 매핑, 변환 및 단위 변환 시스템 구현",
            "dependencies": [
              "27.4"
            ],
            "details": "데이터 스키마 매핑, 타입 변환 로직, 단위 변환 시스템, 데이터 정규화, 변환 규칙 설정 UI, 변환 로그 및 에러 추적",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "장애 복구 및 서킷 브레이커 시스템 구현",
            "description": "연결 장애 감지, 자동 복구 및 서킷 브레이커 패턴 기반 장애 처리 시스템 구현",
            "dependencies": [
              "27.5"
            ],
            "details": "헬스체크 시스템, 서킷 브레이커 패턴 구현, 자동 재연결 로직, 장애 알림 시스템, 백업 데이터소스 전환, 장애 복구 모니터링",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 28,
        "title": "실시간 모니터링 대시보드 구현",
        "description": "실시간 데이터 시각화, 장비 상태 모니터링, 알람 시스템을 포함한 모니터링 화면 구현",
        "details": "실시간 데이터 시각화 컴포넌트, 장비 상태 인디케이터 (정상/경고/오류). 측정값 표시, 트렌드 차트, 히스토그램. 알람 시스템 (임계값 설정, 알림 표시). 자동 새로고침 (설정 가능한 간격), 데이터 필터링. 반응형 디자인 (모바일 지원), 전체 화면 모드. 내보내기 기능 (PDF, PNG, SVG).",
        "testStrategy": "실시간 데이터 업데이트 테스트, 알람 시스템 테스트, 차트 성능 테스트, 모바일 반응형 테스트, 내보내기 기능 테스트",
        "priority": "medium",
        "dependencies": [
          25,
          27
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "실시간 데이터 시각화 컴포넌트 구현",
            "description": "실시간 데이터를 표시하는 시각화 컴포넌트들을 구현합니다",
            "dependencies": [],
            "details": "측정값 실시간 표시 위젯, 트렌드 차트 컴포넌트, 히스토그램 컴포넌트 구현. WebSocket 또는 SSE를 통한 실시간 데이터 연결. Chart.js 또는 D3.js를 사용한 차트 구현. 데이터 포맷팅 및 단위 변환 기능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "장비 상태 모니터링 시스템 구현",
            "description": "장비 상태를 시각적으로 표시하는 모니터링 시스템을 구현합니다",
            "dependencies": [
              "28.1"
            ],
            "details": "장비 상태 인디케이터 (정상/경고/오류) 컴포넌트 구현. 상태별 색상 코딩 (녹색/노란색/빨간색). 장비 목록 및 상세 정보 표시. 상태 변경 히스토리 추적 및 표시 기능.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "알람 시스템 및 임계값 관리 구현",
            "description": "임계값 기반 알람 시스템과 알림 표시 기능을 구현합니다",
            "dependencies": [
              "28.2"
            ],
            "details": "임계값 설정 인터페이스 구현. 알람 조건 평가 로직 구현. 실시간 알람 표시 및 알림 팝업. 알람 히스토리 관리 및 확인 기능. 이메일/SMS 알림 연동 준비.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "대시보드 레이아웃 및 반응형 디자인 구현",
            "description": "모바일 지원 반응형 디자인과 사용자 친화적인 대시보드 레이아웃을 구현합니다",
            "dependencies": [
              "28.3"
            ],
            "details": "그리드 기반 대시보드 레이아웃 구현. 드래그 앤 드롭으로 위젯 배치 변경. 모바일 반응형 디자인 (Tailwind CSS 활용). 전체 화면 모드 구현. 자동 새로고침 설정 인터페이스.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "데이터 내보내기 및 필터링 기능 구현",
            "description": "대시보드 데이터를 다양한 형식으로 내보내고 필터링하는 기능을 구현합니다",
            "dependencies": [
              "28.4"
            ],
            "details": "PDF, PNG, SVG 형식으로 차트 내보내기 기능 구현. 데이터 필터링 (시간 범위, 장비별, 측정값 타입별). 내보내기 미리보기 및 설정 옵션. 대용량 데이터 처리를 위한 페이지네이션 구현.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 29,
        "title": "공개 퍼블리싱 시스템 및 토큰 기반 액세스 구현",
        "description": "인증 없이 접근 가능한 공개 모니터링 대시보드 퍼블리싱 시스템 구현",
        "details": "토큰 기반 공개 액세스 시스템, UUID 토큰 생성 및 관리. 읽기 전용 공개 모니터링 뷰, 인증 우회 미들웨어. 임베드 가능한 위젯 지원, QR 코드 생성 (모바일 액세스). 토큰 만료 및 회전 시스템, 액세스 로그. 공개 엔드포인트 속도 제한, DDoS 보호. SEO 최적화, 메타 태그 지원.",
        "testStrategy": "토큰 생성 및 검증 테스트, 공개 액세스 테스트, 임베드 위젯 테스트, 보안 테스트 (토큰 우회 시도), 성능 테스트",
        "priority": "medium",
        "dependencies": [
          28
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "토큰 기반 인증 시스템 구현",
            "description": "UUID 토큰 생성, 검증 및 관리 시스템 구현",
            "dependencies": [],
            "details": "UUID 토큰 생성 API 엔드포인트 구현. 토큰 검증 미들웨어 개발. 데이터베이스에 토큰 저장 테이블 설계 (만료시간, 권한, 사용자 매핑). 토큰 만료 및 자동 회전 시스템 구현. 토큰 기반 액세스 로그 기능 추가.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "공개 모니터링 뷰 구현",
            "description": "인증 없이 접근 가능한 읽기 전용 공개 대시보드 뷰 개발",
            "dependencies": [
              "29.1"
            ],
            "details": "공개 액세스용 별도 라우터 구현. 인증 우회 미들웨어 개발 (토큰 검증만). 읽기 전용 모니터링 대시보드 컴포넌트 구현. 민감한 데이터 필터링 로직 적용. 공개 뷰용 제한된 API 엔드포인트 생성.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "임베드 위젯 및 QR 코드 시스템",
            "description": "외부 사이트 임베드 가능한 위젯과 QR 코드 생성 기능 구현",
            "dependencies": [
              "29.2"
            ],
            "details": "iframe 기반 임베드 위젯 컴포넌트 개발. CORS 정책 설정 및 X-Frame-Options 헤더 관리. QR 코드 생성 라이브러리 통합 (qrcode.js). 모바일 최적화된 공개 뷰 구현. 위젯 사이즈 조절 및 테마 커스터마이징 옵션 제공.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "보안 및 SEO 최적화",
            "description": "공개 엔드포인트 보안 강화, 속도 제한, DDoS 보호 및 SEO 최적화 구현",
            "dependencies": [
              "29.3"
            ],
            "details": "Rate limiting 미들웨어 구현 (IP별, 토큰별). DDoS 보호를 위한 요청 패턴 분석 및 차단. 메타 태그 동적 생성 (Open Graph, Twitter Card). 검색 엔진 최적화를 위한 structured data 구현. 보안 헤더 설정 (CSP, HSTS, X-Content-Type-Options).",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 30,
        "title": "성능 최적화 및 캐싱 시스템 구현",
        "description": "대용량 플로우 처리, Redis 캐싱, 가상화를 통한 성능 최적화 구현",
        "details": "ReactFlow 가상화 및 지연 로딩 구현 (500+ 노드 처리). Redis 캐싱 전략 (플로우 데이터, 실시간 데이터, 사용자 세션). CDN 설정, 정적 자산 최적화. 데이터베이스 쿼리 최적화, 인덱스 튜닝. 백그라운드 작업 처리 (Celery), 이미지 처리. 메모리 사용량 최적화, 가비지 컬렉션 튜닝.",
        "testStrategy": "대용량 플로우 성능 테스트 (500+ 노드), 동시 사용자 테스트 (100+), 메모리 사용량 테스트, 캐시 효율성 테스트, 페이지 로드 시간 측정",
        "priority": "medium",
        "dependencies": [
          25,
          27
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ReactFlow 가상화 및 대용량 노드 처리 구현",
            "description": "500개 이상의 노드를 효율적으로 처리하기 위한 ReactFlow 가상화 시스템 구현",
            "dependencies": [],
            "details": "ReactFlow의 viewport-based 가상화 구현, 지연 로딩 시스템 구축, 노드 렌더링 최적화, 메모리 사용량 최적화를 통해 대용량 플로우 처리 성능 향상",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Redis 캐싱 전략 및 시스템 구현",
            "description": "플로우 데이터, 실시간 데이터, 사용자 세션을 위한 포괄적인 Redis 캐싱 시스템 구현",
            "dependencies": [],
            "details": "Redis 클러스터 설정, 캐시 키 전략 설계, TTL 정책 구현, 캐시 무효화 로직, 캐시 히트율 모니터링 및 성능 최적화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "CDN 설정 및 정적 자산 최적화",
            "description": "정적 자산 전송 최적화를 위한 CDN 설정 및 자산 최적화 구현",
            "dependencies": [],
            "details": "CDN 설정 및 구성, 정적 파일 압축 및 최적화, 이미지 최적화 및 지연 로딩, 번들 크기 최적화, 캐시 헤더 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "데이터베이스 쿼리 최적화 및 인덱스 튜닝",
            "description": "PostgreSQL 데이터베이스 성능 최적화를 위한 쿼리 및 인덱스 최적화",
            "dependencies": [],
            "details": "슬로우 쿼리 분석 및 최적화, 복합 인덱스 설계, 쿼리 실행 계획 분석, 데이터베이스 커넥션 풀 최적화, 배치 처리 최적화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "백그라운드 작업 처리 시스템 구현",
            "description": "Celery를 활용한 백그라운드 작업 처리 및 이미지 처리 시스템 구현",
            "dependencies": [],
            "details": "Celery 워커 설정 및 구성, 비동기 작업 큐 시스템, 이미지 처리 작업 최적화, 작업 상태 모니터링, 에러 처리 및 재시도 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "메모리 사용량 최적화 및 가비지 컬렉션 튜닝",
            "description": "시스템 전반의 메모리 사용량 최적화 및 가비지 컬렉션 성능 튜닝",
            "dependencies": [
              "30.1",
              "30.2"
            ],
            "details": "메모리 프로파일링 및 분석, 메모리 누수 탐지 및 수정, 가비지 컬렉션 튜닝, 객체 풀링 구현, 메모리 사용량 모니터링 시스템 구축",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-13T23:37:22.174Z",
      "updated": "2025-08-11T04:33:49.755Z",
      "description": "Tasks for master context"
    }
  }
}