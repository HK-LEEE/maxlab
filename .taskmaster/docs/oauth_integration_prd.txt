# MAX Lab OAuth 인증 시스템 완전 통합 PRD

## 1. 프로젝트 개요

### 1.1 배경
MAX Lab 프로젝트는 현재 복잡한 다층 인증 시스템을 운영하고 있으며, OAuth 2.0, 전통적인 JWT, 로컬 JWT 디코딩의 3가지 fallback 메커니즘을 가지고 있습니다. 이러한 복잡성은 유지보수를 어렵게 하고 버그 발생 가능성을 높입니다.

### 1.2 목표
- **단일 인증 플로우**: OAuth 2.0 전용 인증 시스템으로 통합
- **폴백 로직 완전 제거**: 모든 fallback 메커니즘 삭제
- **명확한 오류 처리**: 실패 시 사용자에게 명확한 오류 메시지 표시
- **환경 일원화**: 개발/운영 환경 모두 동일한 OAuth 방식 사용

### 1.3 성공 지표
- 인증 관련 코드 복잡도 50% 이상 감소
- 인증 실패 시 사용자 친화적 오류 메시지 100% 표시
- 개발/운영 환경 인증 플로우 100% 동일

## 2. 현재 시스템 분석

### 2.1 현재 인증 플로우
```
1. OAuth userinfo 엔드포인트 호출 (Primary)
2. Traditional auth 엔드포인트 호출 (Fallback 1)
3. Local JWT decode (Fallback 2)
```

### 2.2 문제점
- Redis 연결 실패로 Token Blacklist 동작 불가
- HTTP 헤더 오류: `Illegal header value b'Bearer '`
- SERVICE_TOKEN 누락으로 외부 API 호출 실패
- UUID 매핑 서비스 불안정
- 그룹명 정규화 문제

### 2.3 제거 대상 코드
- `decode_jwt_token_locally()` 함수
- Traditional auth fallback 로직
- 복잡한 multi-tier 검증 시스템
- 환경별 분기 처리 로직

## 3. 새로운 아키텍처 설계

### 3.1 단순화된 인증 플로우
```
Frontend -> Backend -> MAX Platform OAuth -> Backend -> Frontend
          (Bearer Token)    (OAuth userinfo)      (User Data)
```

### 3.2 핵심 원칙
1. **단일 진실의 원천**: MAX Platform OAuth 서버만 신뢰
2. **즉시 실패**: 인증 실패 시 즉시 오류 반환
3. **명확한 메시지**: 사용자에게 구체적인 오류 원인 제공
4. **환경 무관**: 모든 환경에서 동일한 플로우

### 3.3 오류 처리 전략
```
인증 실패 -> 명확한 오류 코드 + 사용자 메시지 -> Frontend 팝업 표시
```

## 4. 구현 요구사항

### 4.1 Backend 개선사항

#### 4.1.1 인증 플로우 단순화
- `verify_token_with_auth_server()` 함수 완전 재작성
- OAuth userinfo 엔드포인트만 사용
- 모든 fallback 로직 제거

#### 4.1.2 오류 처리 개선
- 구체적인 오류 코드 정의 (AUTH_001, AUTH_002 등)
- 사용자 친화적 오류 메시지
- 오류 상황별 명확한 안내

#### 4.1.3 설정 통합
- 개발/운영 환경 설정 통일
- 환경별 분기 로직 제거
- OAuth 전용 설정 구조

#### 4.1.4 의존성 관리
- Redis 의존성 제거 또는 선택적 사용
- SERVICE_TOKEN 요구사항 명확화
- 외부 서비스 연결 실패 시 명확한 오류

### 4.2 Frontend 개선사항

#### 4.2.1 오류 UI 개선
- 인증 오류 전용 모달/팝업 컴포넌트
- 오류 코드별 맞춤형 메시지
- 재시도/로그아웃 옵션 제공

#### 4.2.2 토큰 관리 단순화
- OAuth 토큰만 관리
- 토큰 갱신 로직 개선
- 만료 시 자동 재인증 플로우

### 4.3 보안 요구사항
- HTTPS 필수 사용
- 토큰 보안 저장
- CSRF 보호 유지
- Rate limiting 적용

## 5. 구현 단계

### 5.1 Phase 1: 폴백 로직 제거
- 모든 fallback 함수 삭제
- 단일 OAuth 플로우로 통합
- 기본 오류 처리 구현

### 5.2 Phase 2: 오류 처리 개선
- 구체적인 오류 코드 체계 구축
- Frontend 오류 UI 개발
- 사용자 친화적 메시지 구현

### 5.3 Phase 3: 설정 및 환경 통합
- 개발/운영 환경 설정 통일
- 의존성 요구사항 정리
- 배포 가이드 작성

### 5.4 Phase 4: 테스트 및 검증
- 인증 플로우 통합 테스트
- 오류 시나리오 테스트
- 성능 및 보안 검증

### 5.5 Phase 5: 문서화 및 배포
- 새로운 인증 플로우 문서화
- 개발자 가이드 업데이트
- 프로덕션 배포 준비

## 6. 위험 요소 및 대응책

### 6.1 위험 요소
- OAuth 서버 다운 시 전체 서비스 불가
- 기존 토큰 호환성 문제
- 사용자 경험 변화에 따른 혼란

### 6.2 대응책
- OAuth 서버 모니터링 강화
- 점진적 마이그레이션 계획
- 사용자 안내 및 교육 자료 제공

## 7. 성공 기준

### 7.1 기술적 지표
- 인증 관련 코드 라인 수 50% 이상 감소
- 인증 응답 시간 평균 200ms 이하
- 오류 발생 시 100% 명확한 메시지 제공

### 7.2 사용자 경험 지표
- 인증 실패 시 사용자 문의 건수 50% 감소
- 로그인 성공률 99% 이상 유지
- 개발자 온보딩 시간 30% 단축

## 8. 일정 및 리소스

### 8.1 예상 일정
- Phase 1-2: 1주일 (핵심 기능 구현)
- Phase 3-4: 1주일 (통합 및 테스트)
- Phase 5: 3일 (문서화 및 배포)

### 8.2 필요 리소스
- Backend 개발자: 전담 1명
- Frontend 개발자: 파트타임 0.5명
- QA 테스터: 파트타임 0.3명

## 9. 결론

OAuth 전용 인증 시스템으로의 통합은 시스템 복잡도를 대폭 줄이고 유지보수성을 향상시킬 것입니다. 폴백 로직을 완전히 제거하고 명확한 오류 처리를 구현함으로써 더 안정적이고 사용자 친화적인 인증 시스템을 구축할 수 있습니다.